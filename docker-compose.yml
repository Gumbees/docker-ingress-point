# Docker Ingress Point - Traefik Configuration
# Environment variables are loaded from .env file by default
# See README.md for detailed documentation
#
# This configuration provides:
# - Traefik reverse proxy with HTTP/HTTPS access (80, 443, 8080)
# - Automatic SSL certificates via Let's Encrypt with Cloudflare DNS challenge
# - Dedicated ipvlan network with static IP on VLAN 180
# - Multi-app network discovery and routing

version: "3.8"

services:
  traefik:
    image: "traefik:latest"
    entrypoint: ["/usr/local/bin/traefik"]
    environment:
      - TZ=${TZ}
      # Cloudflare API credentials for DNS challenge
      # Method 1: API Token (recommended - more secure)
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN:-}
      # Method 2: Global API Key (fallback if API Token not provided)
      - CF_API_EMAIL=${CF_API_EMAIL:-}
      - CF_API_KEY=${CF_API_KEY:-}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "acme-certificates:/acme"
    command:
      - --api.dashboard=true
      - --api.insecure=false
      - --providers.swarm=true
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      - --providers.swarm.exposedbydefault=false
      - --providers.swarm.network=traefik_public
      - --ping=true
      - --ping.entryPoint=dashboard
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.dashboard.address=:8080
      # Global HTTP to HTTPS redirect
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --log.level=${TRAEFIK_LOG_LEVEL:-INFO}
      - --accesslog=${TRAEFIK_ACCESS_LOG:-false}
      # ACME (Let's Encrypt) configuration
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme/acme.json
      - --certificatesresolvers.letsencrypt.acme.caserver=${ACME_CA_SERVER:-https://acme-v02.api.letsencrypt.org/directory}
    networks:
      traefik_public:
    deploy:
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_DASHBOARD_HOST:-traefik.localhost}`)"
        - "traefik.http.routers.traefik-dashboard.entrypoints=dashboard"
        - "traefik.http.routers.traefik-dashboard.tls=${TRAEFIK_DASHBOARD_TLS:-false}"
        - "traefik.http.routers.traefik-dashboard.service=api@internal"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"
        - "traefik.http.services.docker-ingress-point-traefik.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
      


networks:
  # External Traefik ingress network (shared across stacks)
  traefik_public:
    external: true
    name: "traefik_public"
  

volumes:
  # ACME certificate storage
  acme-certificates:
    name: "${CONTAINER_NAME_PREFIX}-acme-certificates"
    driver: local
    driver_opts:
      type: ${ACME_VOLUME_TYPE:-}
      o: ${ACME_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/acme