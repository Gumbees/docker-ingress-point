# Docker Ingress Point - Standalone Traefik Configuration
# Environment variables are loaded from .env file by default
# See README.md for detailed documentation
#
# This configuration provides:
# - Traefik reverse proxy with HTTP/HTTPS access (80, 443, 8081)
# - Automatic SSL certificates via Let's Encrypt with Cloudflare DNS challenge
# - Docker provider for service discovery (standalone Docker only)
# - Multi-app network discovery and routing
#
# Deploy with: docker-compose up -d

version: "3.8"

services:
  traefik:
    container_name: "${CONTAINER_NAME_PREFIX:-traefik}-ingress"
    image: "traefik:latest"
    entrypoint: ["/usr/local/bin/traefik"]
    # Ensure container has proper permissions to access host Docker socket across different hosts
    # - userns_mode: "host" avoids user namespace remapping issues
    # - user: "0:0" ensures Traefik runs as root inside container
    userns_mode: "host"
    user: "0:0"
    environment:
      - TZ=${TZ:-America/New_York}
      # Cloudflare API credentials for DNS challenge
      # Method 1: API Token (recommended - more secure)
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN:-}
      # Method 2: Global API Key (fallback if API Token not provided)
      - CF_API_EMAIL=${CF_API_EMAIL:-}
      - CF_API_KEY=${CF_API_KEY:-}
    volumes:
      # Add SELinux relabel (:z) for hosts with SELinux enforcing; harmless elsewhere
      - "/var/run/docker.sock:/var/run/docker.sock:ro,z"
      - "acme-certificates:/acme"
    command:
      # Enable dashboard and API
      - "--api.dashboard=true"
      - "--api.insecure=${TRAEFIK_INSECURE_API:-false}"
      # Docker provider configuration (for standalone Docker Compose)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.watch=true"
      - "--providers.docker.useBindPortIP=false"
      # Ping configuration
      - "--ping=true"
      - "--ping.entryPoint=dashboard"
      # Entry points
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.dashboard.address=:8081"
      # Global HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      # Logging
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
      - "--accesslog=${TRAEFIK_ACCESS_LOG:-false}"
      # ACME (Let's Encrypt) configuration
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.caserver=${ACME_CA_SERVER:-https://acme-v02.api.letsencrypt.org/directory}"
    networks:
      traefik_public:
      dmz:
        ipv4_address: 192.168.73.80
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      # Dashboard configuration
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DASHBOARD_HOST:-traefik.localhost}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=dashboard"
      - "traefik.http.routers.dashboard.tls=${TRAEFIK_DASHBOARD_TLS:-false}"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  # Traefik public network for service discovery
  traefik_public:
    driver: bridge
    name: traefik_public
  
  # DMZ external network with static IP for Traefik
  dmz:
    external: true
    name: dmz
    ipam:
      config:
        - subnet: 192.168.73.0/24
          gateway: 192.168.73.1

volumes:
  # ACME certificate storage
  acme-certificates:
    name: "${CONTAINER_NAME_PREFIX:-traefik}-acme-certificates"
    driver: local
    driver_opts:
      type: ${ACME_VOLUME_TYPE:-}
      o: ${ACME_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE:-/data/traefik}/acme
